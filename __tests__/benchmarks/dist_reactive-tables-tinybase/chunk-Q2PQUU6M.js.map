{"version":3,"sources":["../node_modules/.pnpm/ms@2.1.2/node_modules/ms/index.js","../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/common.js","../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/browser.js","../node_modules/.pnpm/has-flag@4.0.0/node_modules/has-flag/index.js","../node_modules/.pnpm/supports-color@8.1.1/node_modules/supports-color/index.js","../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/node.js","../node_modules/.pnpm/debug@4.3.4/node_modules/debug/src/index.js","../src/lib/external/mud/schema.ts","../src/lib/external/uuid.ts","../src/lib/tinybase/adapter.ts","../src/lib/constants.ts","../src/lib/record.ts","../src/lib/external/mud/utils.ts","../src/lib/tinybase/tables.ts","../src/adapter/createCustomWriter.ts","../src/adapter/decodeValueArgs.ts","../src/adapter/encodePropertiesToTinyBase.ts","../src/adapter/decodePropertiesFromTinyBase.ts","../src/adapter/index.ts","../src/lib/tinybase/query.ts","../src/lib/tinybase/store.ts","../src/lib/debug.ts","../src/lib/definitions.ts","../node_modules/.pnpm/@latticexyz+world@2.0.6_typescript@5.4.5/node_modules/@latticexyz/world/ts/config/defaults.ts","../node_modules/.pnpm/@latticexyz+world@2.0.6_typescript@5.4.5/node_modules/@latticexyz/world/ts/config/v2/world.ts","../node_modules/.pnpm/@latticexyz+world@2.0.6_typescript@5.4.5/node_modules/@latticexyz/world/ts/config/v2/defaults.ts","../node_modules/.pnpm/@latticexyz+world@2.0.6_typescript@5.4.5/node_modules/@latticexyz/world/ts/config/v2/systems.ts","../node_modules/.pnpm/@latticexyz+world@2.0.6_typescript@5.4.5/node_modules/@latticexyz/world/ts/config/v2/codegen.ts","../node_modules/.pnpm/@latticexyz+world@2.0.6_typescript@5.4.5/node_modules/@latticexyz/world/ts/config/v2/deploy.ts","../node_modules/.pnpm/@latticexyz+world@2.0.6_typescript@5.4.5/node_modules/@latticexyz/world/mud.config.ts"],"sourcesContent":["/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar w = d * 7;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} [options]\n * @throws {Error} throw an error if val is not a non-empty string or a number\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options) {\n  options = options || {};\n  var type = typeof val;\n  if (type === 'string' && val.length > 0) {\n    return parse(val);\n  } else if (type === 'number' && isFinite(val)) {\n    return options.long ? fmtLong(val) : fmtShort(val);\n  }\n  throw new Error(\n    'val is not a non-empty string or a valid number. val=' +\n      JSON.stringify(val)\n  );\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  str = String(str);\n  if (str.length > 100) {\n    return;\n  }\n  var match = /^(-?(?:\\d+)?\\.?\\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(\n    str\n  );\n  if (!match) {\n    return;\n  }\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'yrs':\n    case 'yr':\n    case 'y':\n      return n * y;\n    case 'weeks':\n    case 'week':\n    case 'w':\n      return n * w;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'hrs':\n    case 'hr':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'mins':\n    case 'min':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 'secs':\n    case 'sec':\n    case 's':\n      return n * s;\n    case 'milliseconds':\n    case 'millisecond':\n    case 'msecs':\n    case 'msec':\n    case 'ms':\n      return n;\n    default:\n      return undefined;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtShort(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return Math.round(ms / d) + 'd';\n  }\n  if (msAbs >= h) {\n    return Math.round(ms / h) + 'h';\n  }\n  if (msAbs >= m) {\n    return Math.round(ms / m) + 'm';\n  }\n  if (msAbs >= s) {\n    return Math.round(ms / s) + 's';\n  }\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction fmtLong(ms) {\n  var msAbs = Math.abs(ms);\n  if (msAbs >= d) {\n    return plural(ms, msAbs, d, 'day');\n  }\n  if (msAbs >= h) {\n    return plural(ms, msAbs, h, 'hour');\n  }\n  if (msAbs >= m) {\n    return plural(ms, msAbs, m, 'minute');\n  }\n  if (msAbs >= s) {\n    return plural(ms, msAbs, s, 'second');\n  }\n  return ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, msAbs, n, name) {\n  var isPlural = msAbs >= n * 1.5;\n  return Math.round(ms / n) + ' ' + name + (isPlural ? 's' : '');\n}\n","\n/**\n * This is the common logic for both the Node.js and web browser\n * implementations of `debug()`.\n */\n\nfunction setup(env) {\n\tcreateDebug.debug = createDebug;\n\tcreateDebug.default = createDebug;\n\tcreateDebug.coerce = coerce;\n\tcreateDebug.disable = disable;\n\tcreateDebug.enable = enable;\n\tcreateDebug.enabled = enabled;\n\tcreateDebug.humanize = require('ms');\n\tcreateDebug.destroy = destroy;\n\n\tObject.keys(env).forEach(key => {\n\t\tcreateDebug[key] = env[key];\n\t});\n\n\t/**\n\t* The currently active debug mode names, and names to skip.\n\t*/\n\n\tcreateDebug.names = [];\n\tcreateDebug.skips = [];\n\n\t/**\n\t* Map of special \"%n\" handling functions, for the debug \"format\" argument.\n\t*\n\t* Valid key names are a single, lower or upper-case letter, i.e. \"n\" and \"N\".\n\t*/\n\tcreateDebug.formatters = {};\n\n\t/**\n\t* Selects a color for a debug namespace\n\t* @param {String} namespace The namespace string for the debug instance to be colored\n\t* @return {Number|String} An ANSI color code for the given namespace\n\t* @api private\n\t*/\n\tfunction selectColor(namespace) {\n\t\tlet hash = 0;\n\n\t\tfor (let i = 0; i < namespace.length; i++) {\n\t\t\thash = ((hash << 5) - hash) + namespace.charCodeAt(i);\n\t\t\thash |= 0; // Convert to 32bit integer\n\t\t}\n\n\t\treturn createDebug.colors[Math.abs(hash) % createDebug.colors.length];\n\t}\n\tcreateDebug.selectColor = selectColor;\n\n\t/**\n\t* Create a debugger with the given `namespace`.\n\t*\n\t* @param {String} namespace\n\t* @return {Function}\n\t* @api public\n\t*/\n\tfunction createDebug(namespace) {\n\t\tlet prevTime;\n\t\tlet enableOverride = null;\n\t\tlet namespacesCache;\n\t\tlet enabledCache;\n\n\t\tfunction debug(...args) {\n\t\t\t// Disabled?\n\t\t\tif (!debug.enabled) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst self = debug;\n\n\t\t\t// Set `diff` timestamp\n\t\t\tconst curr = Number(new Date());\n\t\t\tconst ms = curr - (prevTime || curr);\n\t\t\tself.diff = ms;\n\t\t\tself.prev = prevTime;\n\t\t\tself.curr = curr;\n\t\t\tprevTime = curr;\n\n\t\t\targs[0] = createDebug.coerce(args[0]);\n\n\t\t\tif (typeof args[0] !== 'string') {\n\t\t\t\t// Anything else let's inspect with %O\n\t\t\t\targs.unshift('%O');\n\t\t\t}\n\n\t\t\t// Apply any `formatters` transformations\n\t\t\tlet index = 0;\n\t\t\targs[0] = args[0].replace(/%([a-zA-Z%])/g, (match, format) => {\n\t\t\t\t// If we encounter an escaped % then don't increase the array index\n\t\t\t\tif (match === '%%') {\n\t\t\t\t\treturn '%';\n\t\t\t\t}\n\t\t\t\tindex++;\n\t\t\t\tconst formatter = createDebug.formatters[format];\n\t\t\t\tif (typeof formatter === 'function') {\n\t\t\t\t\tconst val = args[index];\n\t\t\t\t\tmatch = formatter.call(self, val);\n\n\t\t\t\t\t// Now we need to remove `args[index]` since it's inlined in the `format`\n\t\t\t\t\targs.splice(index, 1);\n\t\t\t\t\tindex--;\n\t\t\t\t}\n\t\t\t\treturn match;\n\t\t\t});\n\n\t\t\t// Apply env-specific formatting (colors, etc.)\n\t\t\tcreateDebug.formatArgs.call(self, args);\n\n\t\t\tconst logFn = self.log || createDebug.log;\n\t\t\tlogFn.apply(self, args);\n\t\t}\n\n\t\tdebug.namespace = namespace;\n\t\tdebug.useColors = createDebug.useColors();\n\t\tdebug.color = createDebug.selectColor(namespace);\n\t\tdebug.extend = extend;\n\t\tdebug.destroy = createDebug.destroy; // XXX Temporary. Will be removed in the next major release.\n\n\t\tObject.defineProperty(debug, 'enabled', {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: false,\n\t\t\tget: () => {\n\t\t\t\tif (enableOverride !== null) {\n\t\t\t\t\treturn enableOverride;\n\t\t\t\t}\n\t\t\t\tif (namespacesCache !== createDebug.namespaces) {\n\t\t\t\t\tnamespacesCache = createDebug.namespaces;\n\t\t\t\t\tenabledCache = createDebug.enabled(namespace);\n\t\t\t\t}\n\n\t\t\t\treturn enabledCache;\n\t\t\t},\n\t\t\tset: v => {\n\t\t\t\tenableOverride = v;\n\t\t\t}\n\t\t});\n\n\t\t// Env-specific initialization logic for debug instances\n\t\tif (typeof createDebug.init === 'function') {\n\t\t\tcreateDebug.init(debug);\n\t\t}\n\n\t\treturn debug;\n\t}\n\n\tfunction extend(namespace, delimiter) {\n\t\tconst newDebug = createDebug(this.namespace + (typeof delimiter === 'undefined' ? ':' : delimiter) + namespace);\n\t\tnewDebug.log = this.log;\n\t\treturn newDebug;\n\t}\n\n\t/**\n\t* Enables a debug mode by namespaces. This can include modes\n\t* separated by a colon and wildcards.\n\t*\n\t* @param {String} namespaces\n\t* @api public\n\t*/\n\tfunction enable(namespaces) {\n\t\tcreateDebug.save(namespaces);\n\t\tcreateDebug.namespaces = namespaces;\n\n\t\tcreateDebug.names = [];\n\t\tcreateDebug.skips = [];\n\n\t\tlet i;\n\t\tconst split = (typeof namespaces === 'string' ? namespaces : '').split(/[\\s,]+/);\n\t\tconst len = split.length;\n\n\t\tfor (i = 0; i < len; i++) {\n\t\t\tif (!split[i]) {\n\t\t\t\t// ignore empty strings\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tnamespaces = split[i].replace(/\\*/g, '.*?');\n\n\t\t\tif (namespaces[0] === '-') {\n\t\t\t\tcreateDebug.skips.push(new RegExp('^' + namespaces.slice(1) + '$'));\n\t\t\t} else {\n\t\t\t\tcreateDebug.names.push(new RegExp('^' + namespaces + '$'));\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t* Disable debug output.\n\t*\n\t* @return {String} namespaces\n\t* @api public\n\t*/\n\tfunction disable() {\n\t\tconst namespaces = [\n\t\t\t...createDebug.names.map(toNamespace),\n\t\t\t...createDebug.skips.map(toNamespace).map(namespace => '-' + namespace)\n\t\t].join(',');\n\t\tcreateDebug.enable('');\n\t\treturn namespaces;\n\t}\n\n\t/**\n\t* Returns true if the given mode name is enabled, false otherwise.\n\t*\n\t* @param {String} name\n\t* @return {Boolean}\n\t* @api public\n\t*/\n\tfunction enabled(name) {\n\t\tif (name[name.length - 1] === '*') {\n\t\t\treturn true;\n\t\t}\n\n\t\tlet i;\n\t\tlet len;\n\n\t\tfor (i = 0, len = createDebug.skips.length; i < len; i++) {\n\t\t\tif (createDebug.skips[i].test(name)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t}\n\n\t\tfor (i = 0, len = createDebug.names.length; i < len; i++) {\n\t\t\tif (createDebug.names[i].test(name)) {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t* Convert regexp to namespace\n\t*\n\t* @param {RegExp} regxep\n\t* @return {String} namespace\n\t* @api private\n\t*/\n\tfunction toNamespace(regexp) {\n\t\treturn regexp.toString()\n\t\t\t.substring(2, regexp.toString().length - 2)\n\t\t\t.replace(/\\.\\*\\?$/, '*');\n\t}\n\n\t/**\n\t* Coerce `val`.\n\t*\n\t* @param {Mixed} val\n\t* @return {Mixed}\n\t* @api private\n\t*/\n\tfunction coerce(val) {\n\t\tif (val instanceof Error) {\n\t\t\treturn val.stack || val.message;\n\t\t}\n\t\treturn val;\n\t}\n\n\t/**\n\t* XXX DO NOT USE. This is a temporary stub function.\n\t* XXX It WILL be removed in the next major release.\n\t*/\n\tfunction destroy() {\n\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t}\n\n\tcreateDebug.enable(createDebug.load());\n\n\treturn createDebug;\n}\n\nmodule.exports = setup;\n","/* eslint-env browser */\n\n/**\n * This is the web browser implementation of `debug()`.\n */\n\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.storage = localstorage();\nexports.destroy = (() => {\n\tlet warned = false;\n\n\treturn () => {\n\t\tif (!warned) {\n\t\t\twarned = true;\n\t\t\tconsole.warn('Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.');\n\t\t}\n\t};\n})();\n\n/**\n * Colors.\n */\n\nexports.colors = [\n\t'#0000CC',\n\t'#0000FF',\n\t'#0033CC',\n\t'#0033FF',\n\t'#0066CC',\n\t'#0066FF',\n\t'#0099CC',\n\t'#0099FF',\n\t'#00CC00',\n\t'#00CC33',\n\t'#00CC66',\n\t'#00CC99',\n\t'#00CCCC',\n\t'#00CCFF',\n\t'#3300CC',\n\t'#3300FF',\n\t'#3333CC',\n\t'#3333FF',\n\t'#3366CC',\n\t'#3366FF',\n\t'#3399CC',\n\t'#3399FF',\n\t'#33CC00',\n\t'#33CC33',\n\t'#33CC66',\n\t'#33CC99',\n\t'#33CCCC',\n\t'#33CCFF',\n\t'#6600CC',\n\t'#6600FF',\n\t'#6633CC',\n\t'#6633FF',\n\t'#66CC00',\n\t'#66CC33',\n\t'#9900CC',\n\t'#9900FF',\n\t'#9933CC',\n\t'#9933FF',\n\t'#99CC00',\n\t'#99CC33',\n\t'#CC0000',\n\t'#CC0033',\n\t'#CC0066',\n\t'#CC0099',\n\t'#CC00CC',\n\t'#CC00FF',\n\t'#CC3300',\n\t'#CC3333',\n\t'#CC3366',\n\t'#CC3399',\n\t'#CC33CC',\n\t'#CC33FF',\n\t'#CC6600',\n\t'#CC6633',\n\t'#CC9900',\n\t'#CC9933',\n\t'#CCCC00',\n\t'#CCCC33',\n\t'#FF0000',\n\t'#FF0033',\n\t'#FF0066',\n\t'#FF0099',\n\t'#FF00CC',\n\t'#FF00FF',\n\t'#FF3300',\n\t'#FF3333',\n\t'#FF3366',\n\t'#FF3399',\n\t'#FF33CC',\n\t'#FF33FF',\n\t'#FF6600',\n\t'#FF6633',\n\t'#FF9900',\n\t'#FF9933',\n\t'#FFCC00',\n\t'#FFCC33'\n];\n\n/**\n * Currently only WebKit-based Web Inspectors, Firefox >= v31,\n * and the Firebug extension (any Firefox version) are known\n * to support \"%c\" CSS customizations.\n *\n * TODO: add a `localStorage` variable to explicitly enable/disable colors\n */\n\n// eslint-disable-next-line complexity\nfunction useColors() {\n\t// NB: In an Electron preload script, document will be defined but not fully\n\t// initialized. Since we know we're in Chrome, we'll just detect this case\n\t// explicitly\n\tif (typeof window !== 'undefined' && window.process && (window.process.type === 'renderer' || window.process.__nwjs)) {\n\t\treturn true;\n\t}\n\n\t// Internet Explorer and Edge do not support colors.\n\tif (typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/(edge|trident)\\/(\\d+)/)) {\n\t\treturn false;\n\t}\n\n\t// Is webkit? http://stackoverflow.com/a/16459606/376773\n\t// document is undefined in react-native: https://github.com/facebook/react-native/pull/1632\n\treturn (typeof document !== 'undefined' && document.documentElement && document.documentElement.style && document.documentElement.style.WebkitAppearance) ||\n\t\t// Is firebug? http://stackoverflow.com/a/398120/376773\n\t\t(typeof window !== 'undefined' && window.console && (window.console.firebug || (window.console.exception && window.console.table))) ||\n\t\t// Is firefox >= v31?\n\t\t// https://developer.mozilla.org/en-US/docs/Tools/Web_Console#Styling_messages\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/firefox\\/(\\d+)/) && parseInt(RegExp.$1, 10) >= 31) ||\n\t\t// Double check webkit in userAgent just in case we are in a worker\n\t\t(typeof navigator !== 'undefined' && navigator.userAgent && navigator.userAgent.toLowerCase().match(/applewebkit\\/(\\d+)/));\n}\n\n/**\n * Colorize log arguments if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\targs[0] = (this.useColors ? '%c' : '') +\n\t\tthis.namespace +\n\t\t(this.useColors ? ' %c' : ' ') +\n\t\targs[0] +\n\t\t(this.useColors ? '%c ' : ' ') +\n\t\t'+' + module.exports.humanize(this.diff);\n\n\tif (!this.useColors) {\n\t\treturn;\n\t}\n\n\tconst c = 'color: ' + this.color;\n\targs.splice(1, 0, c, 'color: inherit');\n\n\t// The final \"%c\" is somewhat tricky, because there could be other\n\t// arguments passed either before or after the %c, so we need to\n\t// figure out the correct index to insert the CSS into\n\tlet index = 0;\n\tlet lastC = 0;\n\targs[0].replace(/%[a-zA-Z%]/g, match => {\n\t\tif (match === '%%') {\n\t\t\treturn;\n\t\t}\n\t\tindex++;\n\t\tif (match === '%c') {\n\t\t\t// We only are interested in the *last* %c\n\t\t\t// (the user may have provided their own)\n\t\t\tlastC = index;\n\t\t}\n\t});\n\n\targs.splice(lastC, 0, c);\n}\n\n/**\n * Invokes `console.debug()` when available.\n * No-op when `console.debug` is not a \"function\".\n * If `console.debug` is not available, falls back\n * to `console.log`.\n *\n * @api public\n */\nexports.log = console.debug || console.log || (() => {});\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\ttry {\n\t\tif (namespaces) {\n\t\t\texports.storage.setItem('debug', namespaces);\n\t\t} else {\n\t\t\texports.storage.removeItem('debug');\n\t\t}\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\nfunction load() {\n\tlet r;\n\ttry {\n\t\tr = exports.storage.getItem('debug');\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n\n\t// If debug isn't set in LS, and we're in Electron, try to load $DEBUG\n\tif (!r && typeof process !== 'undefined' && 'env' in process) {\n\t\tr = process.env.DEBUG;\n\t}\n\n\treturn r;\n}\n\n/**\n * Localstorage attempts to return the localstorage.\n *\n * This is necessary because safari throws\n * when a user disables cookies/localstorage\n * and you attempt to access it.\n *\n * @return {LocalStorage}\n * @api private\n */\n\nfunction localstorage() {\n\ttry {\n\t\t// TVMLKit (Apple TV JS Runtime) does not have a window object, just localStorage in the global context\n\t\t// The Browser also has localStorage in the global context.\n\t\treturn localStorage;\n\t} catch (error) {\n\t\t// Swallow\n\t\t// XXX (@Qix-) should we be logging these?\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %j to `JSON.stringify()`, since no Web Inspectors do that by default.\n */\n\nformatters.j = function (v) {\n\ttry {\n\t\treturn JSON.stringify(v);\n\t} catch (error) {\n\t\treturn '[UnexpectedJSONParseError]: ' + error.message;\n\t}\n};\n","'use strict';\n\nmodule.exports = (flag, argv = process.argv) => {\n\tconst prefix = flag.startsWith('-') ? '' : (flag.length === 1 ? '-' : '--');\n\tconst position = argv.indexOf(prefix + flag);\n\tconst terminatorPosition = argv.indexOf('--');\n\treturn position !== -1 && (terminatorPosition === -1 || position < terminatorPosition);\n};\n","'use strict';\nconst os = require('os');\nconst tty = require('tty');\nconst hasFlag = require('has-flag');\n\nconst {env} = process;\n\nlet flagForceColor;\nif (hasFlag('no-color') ||\n\thasFlag('no-colors') ||\n\thasFlag('color=false') ||\n\thasFlag('color=never')) {\n\tflagForceColor = 0;\n} else if (hasFlag('color') ||\n\thasFlag('colors') ||\n\thasFlag('color=true') ||\n\thasFlag('color=always')) {\n\tflagForceColor = 1;\n}\n\nfunction envForceColor() {\n\tif ('FORCE_COLOR' in env) {\n\t\tif (env.FORCE_COLOR === 'true') {\n\t\t\treturn 1;\n\t\t}\n\n\t\tif (env.FORCE_COLOR === 'false') {\n\t\t\treturn 0;\n\t\t}\n\n\t\treturn env.FORCE_COLOR.length === 0 ? 1 : Math.min(Number.parseInt(env.FORCE_COLOR, 10), 3);\n\t}\n}\n\nfunction translateLevel(level) {\n\tif (level === 0) {\n\t\treturn false;\n\t}\n\n\treturn {\n\t\tlevel,\n\t\thasBasic: true,\n\t\thas256: level >= 2,\n\t\thas16m: level >= 3\n\t};\n}\n\nfunction supportsColor(haveStream, {streamIsTTY, sniffFlags = true} = {}) {\n\tconst noFlagForceColor = envForceColor();\n\tif (noFlagForceColor !== undefined) {\n\t\tflagForceColor = noFlagForceColor;\n\t}\n\n\tconst forceColor = sniffFlags ? flagForceColor : noFlagForceColor;\n\n\tif (forceColor === 0) {\n\t\treturn 0;\n\t}\n\n\tif (sniffFlags) {\n\t\tif (hasFlag('color=16m') ||\n\t\t\thasFlag('color=full') ||\n\t\t\thasFlag('color=truecolor')) {\n\t\t\treturn 3;\n\t\t}\n\n\t\tif (hasFlag('color=256')) {\n\t\t\treturn 2;\n\t\t}\n\t}\n\n\tif (haveStream && !streamIsTTY && forceColor === undefined) {\n\t\treturn 0;\n\t}\n\n\tconst min = forceColor || 0;\n\n\tif (env.TERM === 'dumb') {\n\t\treturn min;\n\t}\n\n\tif (process.platform === 'win32') {\n\t\t// Windows 10 build 10586 is the first Windows release that supports 256 colors.\n\t\t// Windows 10 build 14931 is the first release that supports 16m/TrueColor.\n\t\tconst osRelease = os.release().split('.');\n\t\tif (\n\t\t\tNumber(osRelease[0]) >= 10 &&\n\t\t\tNumber(osRelease[2]) >= 10586\n\t\t) {\n\t\t\treturn Number(osRelease[2]) >= 14931 ? 3 : 2;\n\t\t}\n\n\t\treturn 1;\n\t}\n\n\tif ('CI' in env) {\n\t\tif (['TRAVIS', 'CIRCLECI', 'APPVEYOR', 'GITLAB_CI', 'GITHUB_ACTIONS', 'BUILDKITE', 'DRONE'].some(sign => sign in env) || env.CI_NAME === 'codeship') {\n\t\t\treturn 1;\n\t\t}\n\n\t\treturn min;\n\t}\n\n\tif ('TEAMCITY_VERSION' in env) {\n\t\treturn /^(9\\.(0*[1-9]\\d*)\\.|\\d{2,}\\.)/.test(env.TEAMCITY_VERSION) ? 1 : 0;\n\t}\n\n\tif (env.COLORTERM === 'truecolor') {\n\t\treturn 3;\n\t}\n\n\tif ('TERM_PROGRAM' in env) {\n\t\tconst version = Number.parseInt((env.TERM_PROGRAM_VERSION || '').split('.')[0], 10);\n\n\t\tswitch (env.TERM_PROGRAM) {\n\t\t\tcase 'iTerm.app':\n\t\t\t\treturn version >= 3 ? 3 : 2;\n\t\t\tcase 'Apple_Terminal':\n\t\t\t\treturn 2;\n\t\t\t// No default\n\t\t}\n\t}\n\n\tif (/-256(color)?$/i.test(env.TERM)) {\n\t\treturn 2;\n\t}\n\n\tif (/^screen|^xterm|^vt100|^vt220|^rxvt|color|ansi|cygwin|linux/i.test(env.TERM)) {\n\t\treturn 1;\n\t}\n\n\tif ('COLORTERM' in env) {\n\t\treturn 1;\n\t}\n\n\treturn min;\n}\n\nfunction getSupportLevel(stream, options = {}) {\n\tconst level = supportsColor(stream, {\n\t\tstreamIsTTY: stream && stream.isTTY,\n\t\t...options\n\t});\n\n\treturn translateLevel(level);\n}\n\nmodule.exports = {\n\tsupportsColor: getSupportLevel,\n\tstdout: getSupportLevel({isTTY: tty.isatty(1)}),\n\tstderr: getSupportLevel({isTTY: tty.isatty(2)})\n};\n","/**\n * Module dependencies.\n */\n\nconst tty = require('tty');\nconst util = require('util');\n\n/**\n * This is the Node.js implementation of `debug()`.\n */\n\nexports.init = init;\nexports.log = log;\nexports.formatArgs = formatArgs;\nexports.save = save;\nexports.load = load;\nexports.useColors = useColors;\nexports.destroy = util.deprecate(\n\t() => {},\n\t'Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.'\n);\n\n/**\n * Colors.\n */\n\nexports.colors = [6, 2, 3, 4, 5, 1];\n\ntry {\n\t// Optional dependency (as in, doesn't need to be installed, NOT like optionalDependencies in package.json)\n\t// eslint-disable-next-line import/no-extraneous-dependencies\n\tconst supportsColor = require('supports-color');\n\n\tif (supportsColor && (supportsColor.stderr || supportsColor).level >= 2) {\n\t\texports.colors = [\n\t\t\t20,\n\t\t\t21,\n\t\t\t26,\n\t\t\t27,\n\t\t\t32,\n\t\t\t33,\n\t\t\t38,\n\t\t\t39,\n\t\t\t40,\n\t\t\t41,\n\t\t\t42,\n\t\t\t43,\n\t\t\t44,\n\t\t\t45,\n\t\t\t56,\n\t\t\t57,\n\t\t\t62,\n\t\t\t63,\n\t\t\t68,\n\t\t\t69,\n\t\t\t74,\n\t\t\t75,\n\t\t\t76,\n\t\t\t77,\n\t\t\t78,\n\t\t\t79,\n\t\t\t80,\n\t\t\t81,\n\t\t\t92,\n\t\t\t93,\n\t\t\t98,\n\t\t\t99,\n\t\t\t112,\n\t\t\t113,\n\t\t\t128,\n\t\t\t129,\n\t\t\t134,\n\t\t\t135,\n\t\t\t148,\n\t\t\t149,\n\t\t\t160,\n\t\t\t161,\n\t\t\t162,\n\t\t\t163,\n\t\t\t164,\n\t\t\t165,\n\t\t\t166,\n\t\t\t167,\n\t\t\t168,\n\t\t\t169,\n\t\t\t170,\n\t\t\t171,\n\t\t\t172,\n\t\t\t173,\n\t\t\t178,\n\t\t\t179,\n\t\t\t184,\n\t\t\t185,\n\t\t\t196,\n\t\t\t197,\n\t\t\t198,\n\t\t\t199,\n\t\t\t200,\n\t\t\t201,\n\t\t\t202,\n\t\t\t203,\n\t\t\t204,\n\t\t\t205,\n\t\t\t206,\n\t\t\t207,\n\t\t\t208,\n\t\t\t209,\n\t\t\t214,\n\t\t\t215,\n\t\t\t220,\n\t\t\t221\n\t\t];\n\t}\n} catch (error) {\n\t// Swallow - we only care if `supports-color` is available; it doesn't have to be.\n}\n\n/**\n * Build up the default `inspectOpts` object from the environment variables.\n *\n *   $ DEBUG_COLORS=no DEBUG_DEPTH=10 DEBUG_SHOW_HIDDEN=enabled node script.js\n */\n\nexports.inspectOpts = Object.keys(process.env).filter(key => {\n\treturn /^debug_/i.test(key);\n}).reduce((obj, key) => {\n\t// Camel-case\n\tconst prop = key\n\t\t.substring(6)\n\t\t.toLowerCase()\n\t\t.replace(/_([a-z])/g, (_, k) => {\n\t\t\treturn k.toUpperCase();\n\t\t});\n\n\t// Coerce string value into JS value\n\tlet val = process.env[key];\n\tif (/^(yes|on|true|enabled)$/i.test(val)) {\n\t\tval = true;\n\t} else if (/^(no|off|false|disabled)$/i.test(val)) {\n\t\tval = false;\n\t} else if (val === 'null') {\n\t\tval = null;\n\t} else {\n\t\tval = Number(val);\n\t}\n\n\tobj[prop] = val;\n\treturn obj;\n}, {});\n\n/**\n * Is stdout a TTY? Colored output is enabled when `true`.\n */\n\nfunction useColors() {\n\treturn 'colors' in exports.inspectOpts ?\n\t\tBoolean(exports.inspectOpts.colors) :\n\t\ttty.isatty(process.stderr.fd);\n}\n\n/**\n * Adds ANSI color escape codes if enabled.\n *\n * @api public\n */\n\nfunction formatArgs(args) {\n\tconst {namespace: name, useColors} = this;\n\n\tif (useColors) {\n\t\tconst c = this.color;\n\t\tconst colorCode = '\\u001B[3' + (c < 8 ? c : '8;5;' + c);\n\t\tconst prefix = `  ${colorCode};1m${name} \\u001B[0m`;\n\n\t\targs[0] = prefix + args[0].split('\\n').join('\\n' + prefix);\n\t\targs.push(colorCode + 'm+' + module.exports.humanize(this.diff) + '\\u001B[0m');\n\t} else {\n\t\targs[0] = getDate() + name + ' ' + args[0];\n\t}\n}\n\nfunction getDate() {\n\tif (exports.inspectOpts.hideDate) {\n\t\treturn '';\n\t}\n\treturn new Date().toISOString() + ' ';\n}\n\n/**\n * Invokes `util.format()` with the specified arguments and writes to stderr.\n */\n\nfunction log(...args) {\n\treturn process.stderr.write(util.format(...args) + '\\n');\n}\n\n/**\n * Save `namespaces`.\n *\n * @param {String} namespaces\n * @api private\n */\nfunction save(namespaces) {\n\tif (namespaces) {\n\t\tprocess.env.DEBUG = namespaces;\n\t} else {\n\t\t// If you set a process.env field to null or undefined, it gets cast to the\n\t\t// string 'null' or 'undefined'. Just delete instead.\n\t\tdelete process.env.DEBUG;\n\t}\n}\n\n/**\n * Load `namespaces`.\n *\n * @return {String} returns the previously persisted debug modes\n * @api private\n */\n\nfunction load() {\n\treturn process.env.DEBUG;\n}\n\n/**\n * Init logic for `debug` instances.\n *\n * Create a new `inspectOpts` object in case `useColors` is set\n * differently for a particular `debug` instance.\n */\n\nfunction init(debug) {\n\tdebug.inspectOpts = {};\n\n\tconst keys = Object.keys(exports.inspectOpts);\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tdebug.inspectOpts[keys[i]] = exports.inspectOpts[keys[i]];\n\t}\n}\n\nmodule.exports = require('./common')(exports);\n\nconst {formatters} = module.exports;\n\n/**\n * Map %o to `util.inspect()`, all on a single line.\n */\n\nformatters.o = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts)\n\t\t.split('\\n')\n\t\t.map(str => str.trim())\n\t\t.join(' ');\n};\n\n/**\n * Map %O to `util.inspect()`, allowing multiple lines if needed.\n */\n\nformatters.O = function (v) {\n\tthis.inspectOpts.colors = this.useColors;\n\treturn util.inspect(v, this.inspectOpts);\n};\n","/**\n * Detect Electron renderer / nwjs process, which is node, but we should\n * treat as a browser.\n */\n\nif (typeof process === 'undefined' || process.type === 'renderer' || process.browser === true || process.__nwjs) {\n\tmodule.exports = require('./browser.js');\n} else {\n\tmodule.exports = require('./node.js');\n}\n","import type { SchemaAbiType } from \"@latticexyz/schema-type/internal\";\n\nimport type { $Record } from \"@/lib\";\n\n// (jsdocs)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { ContractTable } from \"@/tables/contract\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { LocalTable } from \"@/tables/local\";\nimport { Hex } from \"viem\";\n\n/**\n * Defines the schema of a properties record inside a {@link ContractTable} or {@link LocalTable}.\n *\n * It uses a {@link Type} enum to be able to infer the TypeScript type of each property.\n *\n * @category Tables\n */\nexport type Schema = {\n  [key: string]: Type;\n};\n\n/**\n * Defines any additional metadata that can be attached to a {@link ContractTable} or {@link LocalTable}.\n *\n * @category Tables\n */\nexport type Metadata =\n  | {\n      [key: string]: unknown;\n    }\n  | undefined;\n\n/**\n * Used to specify the types for properties, and infer their TypeScript type.\n *\n * Note: This is modified from RECS.\n *\n * @category Tables\n */\nexport enum Type {\n  Boolean,\n  Number,\n  OptionalNumber,\n  BigInt,\n  OptionalBigInt,\n  String,\n  OptionalString,\n  NumberArray,\n  OptionalNumberArray,\n  BigIntArray,\n  OptionalBigIntArray,\n  StringArray,\n  OptionalStringArray,\n  Hex,\n  OptionalHex,\n  HexArray,\n  OptionalHexArray,\n  $Record,\n  Optional$Record,\n  $RecordArray,\n  Optional$RecordArray,\n  T,\n  OptionalT,\n}\n\n/**\n * Defines a mapping between JavaScript {@link Type} enums and their corresponding TypeScript types.\n *\n * @category Tables\n */\nexport type PropertiesType<T = unknown> = {\n  [Type.Boolean]: boolean;\n  [Type.Number]: number;\n  [Type.BigInt]: bigint;\n  [Type.String]: string;\n  [Type.Hex]: Hex;\n  [Type.$Record]: $Record;\n  [Type.NumberArray]: number[];\n  [Type.BigIntArray]: bigint[];\n  [Type.StringArray]: string[];\n  [Type.HexArray]: Hex[];\n  [Type.$RecordArray]: $Record[];\n  [Type.OptionalNumber]: number | undefined;\n  [Type.OptionalBigInt]: bigint | undefined;\n  [Type.OptionalString]: string | undefined;\n  [Type.OptionalHex]: Hex | undefined;\n  [Type.Optional$Record]: $Record | undefined;\n  [Type.OptionalNumberArray]: number[] | undefined;\n  [Type.OptionalBigIntArray]: bigint[] | undefined;\n  [Type.OptionalStringArray]: string[] | undefined;\n  [Type.OptionalHexArray]: Hex[] | undefined;\n  [Type.Optional$RecordArray]: $Record[] | undefined;\n  [Type.T]: T;\n  [Type.OptionalT]: T | undefined;\n};\n\n/**\n * Convert a schema ABI type to an TypeScript understandable type.\n *\n * Note: This is copied from the RECS library.\n *\n * @see [@]latticexyz/store-sync/recs/schemaAbiTypeToRecsType.ts\n * @category RECS\n */\nexport const schemaAbiTypeToRecsType = {\n  uint8: Type.Number,\n  uint16: Type.Number,\n  uint24: Type.Number,\n  uint32: Type.Number,\n  uint40: Type.Number,\n  uint48: Type.Number,\n  uint56: Type.BigInt,\n  uint64: Type.BigInt,\n  uint72: Type.BigInt,\n  uint80: Type.BigInt,\n  uint88: Type.BigInt,\n  uint96: Type.BigInt,\n  uint104: Type.BigInt,\n  uint112: Type.BigInt,\n  uint120: Type.BigInt,\n  uint128: Type.BigInt,\n  uint136: Type.BigInt,\n  uint144: Type.BigInt,\n  uint152: Type.BigInt,\n  uint160: Type.BigInt,\n  uint168: Type.BigInt,\n  uint176: Type.BigInt,\n  uint184: Type.BigInt,\n  uint192: Type.BigInt,\n  uint200: Type.BigInt,\n  uint208: Type.BigInt,\n  uint216: Type.BigInt,\n  uint224: Type.BigInt,\n  uint232: Type.BigInt,\n  uint240: Type.BigInt,\n  uint248: Type.BigInt,\n  uint256: Type.BigInt,\n  int8: Type.Number,\n  int16: Type.Number,\n  int24: Type.Number,\n  int32: Type.Number,\n  int40: Type.Number,\n  int48: Type.Number,\n  int56: Type.BigInt,\n  int64: Type.BigInt,\n  int72: Type.BigInt,\n  int80: Type.BigInt,\n  int88: Type.BigInt,\n  int96: Type.BigInt,\n  int104: Type.BigInt,\n  int112: Type.BigInt,\n  int120: Type.BigInt,\n  int128: Type.BigInt,\n  int136: Type.BigInt,\n  int144: Type.BigInt,\n  int152: Type.BigInt,\n  int160: Type.BigInt,\n  int168: Type.BigInt,\n  int176: Type.BigInt,\n  int184: Type.BigInt,\n  int192: Type.BigInt,\n  int200: Type.BigInt,\n  int208: Type.BigInt,\n  int216: Type.BigInt,\n  int224: Type.BigInt,\n  int232: Type.BigInt,\n  int240: Type.BigInt,\n  int248: Type.BigInt,\n  int256: Type.BigInt,\n  bytes1: Type.Hex,\n  bytes2: Type.Hex,\n  bytes3: Type.Hex,\n  bytes4: Type.Hex,\n  bytes5: Type.Hex,\n  bytes6: Type.Hex,\n  bytes7: Type.Hex,\n  bytes8: Type.Hex,\n  bytes9: Type.Hex,\n  bytes10: Type.Hex,\n  bytes11: Type.Hex,\n  bytes12: Type.Hex,\n  bytes13: Type.Hex,\n  bytes14: Type.Hex,\n  bytes15: Type.Hex,\n  bytes16: Type.Hex,\n  bytes17: Type.Hex,\n  bytes18: Type.Hex,\n  bytes19: Type.Hex,\n  bytes20: Type.Hex,\n  bytes21: Type.Hex,\n  bytes22: Type.Hex,\n  bytes23: Type.Hex,\n  bytes24: Type.Hex,\n  bytes25: Type.Hex,\n  bytes26: Type.Hex,\n  bytes27: Type.Hex,\n  bytes28: Type.Hex,\n  bytes29: Type.Hex,\n  bytes30: Type.Hex,\n  bytes31: Type.Hex,\n  bytes32: Type.Hex,\n  bool: Type.Boolean,\n  address: Type.Hex,\n  \"uint8[]\": Type.NumberArray,\n  \"uint16[]\": Type.NumberArray,\n  \"uint24[]\": Type.NumberArray,\n  \"uint32[]\": Type.NumberArray,\n  \"uint40[]\": Type.NumberArray,\n  \"uint48[]\": Type.NumberArray,\n  \"uint56[]\": Type.BigIntArray,\n  \"uint64[]\": Type.BigIntArray,\n  \"uint72[]\": Type.BigIntArray,\n  \"uint80[]\": Type.BigIntArray,\n  \"uint88[]\": Type.BigIntArray,\n  \"uint96[]\": Type.BigIntArray,\n  \"uint104[]\": Type.BigIntArray,\n  \"uint112[]\": Type.BigIntArray,\n  \"uint120[]\": Type.BigIntArray,\n  \"uint128[]\": Type.BigIntArray,\n  \"uint136[]\": Type.BigIntArray,\n  \"uint144[]\": Type.BigIntArray,\n  \"uint152[]\": Type.BigIntArray,\n  \"uint160[]\": Type.BigIntArray,\n  \"uint168[]\": Type.BigIntArray,\n  \"uint176[]\": Type.BigIntArray,\n  \"uint184[]\": Type.BigIntArray,\n  \"uint192[]\": Type.BigIntArray,\n  \"uint200[]\": Type.BigIntArray,\n  \"uint208[]\": Type.BigIntArray,\n  \"uint216[]\": Type.BigIntArray,\n  \"uint224[]\": Type.BigIntArray,\n  \"uint232[]\": Type.BigIntArray,\n  \"uint240[]\": Type.BigIntArray,\n  \"uint248[]\": Type.BigIntArray,\n  \"uint256[]\": Type.BigIntArray,\n  \"int8[]\": Type.NumberArray,\n  \"int16[]\": Type.NumberArray,\n  \"int24[]\": Type.NumberArray,\n  \"int32[]\": Type.NumberArray,\n  \"int40[]\": Type.NumberArray,\n  \"int48[]\": Type.NumberArray,\n  \"int56[]\": Type.BigIntArray,\n  \"int64[]\": Type.BigIntArray,\n  \"int72[]\": Type.BigIntArray,\n  \"int80[]\": Type.BigIntArray,\n  \"int88[]\": Type.BigIntArray,\n  \"int96[]\": Type.BigIntArray,\n  \"int104[]\": Type.BigIntArray,\n  \"int112[]\": Type.BigIntArray,\n  \"int120[]\": Type.BigIntArray,\n  \"int128[]\": Type.BigIntArray,\n  \"int136[]\": Type.BigIntArray,\n  \"int144[]\": Type.BigIntArray,\n  \"int152[]\": Type.BigIntArray,\n  \"int160[]\": Type.BigIntArray,\n  \"int168[]\": Type.BigIntArray,\n  \"int176[]\": Type.BigIntArray,\n  \"int184[]\": Type.BigIntArray,\n  \"int192[]\": Type.BigIntArray,\n  \"int200[]\": Type.BigIntArray,\n  \"int208[]\": Type.BigIntArray,\n  \"int216[]\": Type.BigIntArray,\n  \"int224[]\": Type.BigIntArray,\n  \"int232[]\": Type.BigIntArray,\n  \"int240[]\": Type.BigIntArray,\n  \"int248[]\": Type.BigIntArray,\n  \"int256[]\": Type.BigIntArray,\n  \"bytes1[]\": Type.HexArray,\n  \"bytes2[]\": Type.HexArray,\n  \"bytes3[]\": Type.HexArray,\n  \"bytes4[]\": Type.HexArray,\n  \"bytes5[]\": Type.HexArray,\n  \"bytes6[]\": Type.HexArray,\n  \"bytes7[]\": Type.HexArray,\n  \"bytes8[]\": Type.HexArray,\n  \"bytes9[]\": Type.HexArray,\n  \"bytes10[]\": Type.HexArray,\n  \"bytes11[]\": Type.HexArray,\n  \"bytes12[]\": Type.HexArray,\n  \"bytes13[]\": Type.HexArray,\n  \"bytes14[]\": Type.HexArray,\n  \"bytes15[]\": Type.HexArray,\n  \"bytes16[]\": Type.HexArray,\n  \"bytes17[]\": Type.HexArray,\n  \"bytes18[]\": Type.HexArray,\n  \"bytes19[]\": Type.HexArray,\n  \"bytes20[]\": Type.HexArray,\n  \"bytes21[]\": Type.HexArray,\n  \"bytes22[]\": Type.HexArray,\n  \"bytes23[]\": Type.HexArray,\n  \"bytes24[]\": Type.HexArray,\n  \"bytes25[]\": Type.HexArray,\n  \"bytes26[]\": Type.HexArray,\n  \"bytes27[]\": Type.HexArray,\n  \"bytes28[]\": Type.HexArray,\n  \"bytes29[]\": Type.HexArray,\n  \"bytes30[]\": Type.HexArray,\n  \"bytes31[]\": Type.HexArray,\n  \"bytes32[]\": Type.HexArray,\n  \"bool[]\": Type.T, // no boolean arr,\n  \"address[]\": Type.HexArray,\n  bytes: Type.Hex,\n  string: Type.String,\n} as const satisfies Record<SchemaAbiType, Type>;\n\n/**\n * Infer a TypeScript-understandable type (an enum associated with the type) from a schema ABI type.\n *\n * Note: This is copied from the RECS library.\n *\n * @see [@]latticexyz/store-sync/recs/schemaAbiTypeToRecsType.ts\n * @category RECS\n */\nexport type SchemaAbiTypeToRecsType<T extends SchemaAbiType> = (typeof schemaAbiTypeToRecsType)[T];\n","/**\n * UUID.core.js - UUID.js for Minimalists\n *\n * @file\n * @author  LiosK\n * @version v4.2.0\n * @license Apache License 2.0: Copyright (c) 2010-2018 LiosK\n * @url https://github.com/LiosK/UUID.js/blob/master/src/uuid.core.js\n */\n\n/**\n * @class\n * @classdesc {@link UUID} object.\n * @hideconstructor\n */\n\n// Core Component {{{\n\n/**\n * Generates a version 4 UUID as a hexadecimal string.\n * @returns {string} Hexadecimal UUID string.\n */\nexport const uuid = function () {\n  const rand = _getRandomInt,\n    hex = _hexAligner;\n  return (\n    hex(rand(32), 8) + // time_low\n    \"-\" +\n    hex(rand(16), 4) + // time_mid\n    \"-\" +\n    hex(0x4000 | rand(12), 4) + // time_hi_and_version\n    \"-\" +\n    hex(0x8000 | rand(14), 4) + // clock_seq_hi_and_reserved clock_seq_low\n    \"-\" +\n    hex(rand(48), 12)\n  ); // node\n};\n\n/**\n * Returns an unsigned x-bit random integer.\n * @private\n * @param {number} x Unsigned integer ranging from 0 to 53, inclusive.\n * @returns {number} Unsigned x-bit random integer (0 <= f(x) < 2^x).\n */\nconst _getRandomInt = function (x: number) {\n  if (x < 0 || x > 53) {\n    return NaN;\n  }\n  const n = 0 | (Math.random() * 0x40000000); // 1 << 30\n  return x > 30 ? n + (0 | (Math.random() * (1 << (x - 30)))) * 0x40000000 : n >>> (30 - x);\n};\n\n/**\n * Converts an integer to a zero-filled hexadecimal string.\n * @private\n * @param {number} num\n * @param {number} length\n * @returns {string}\n */\nconst _hexAligner = function (num: number, length: number) {\n  let str = num.toString(16),\n    i = length - str.length,\n    z = \"0\";\n  for (; i > 0; i >>>= 1, z += z) {\n    if (i & 1) {\n      str = z + str;\n    }\n  }\n  return str;\n};\n","import type { Hex } from \"viem\";\n\nimport type { PropertiesSchema } from \"@/tables/contract\";\nimport type { TinyBaseStore } from \"@/lib\";\n\n/**\n * Store the properties schema of a table inside the TinyBase store.\n *\n * Note: This is done when creating a contract table, to be able to later access this schema given a table id.\n *\n * @param store The regular TinyBase store.\n * @param tableId The id of the table for which all rows follow the provided schema.\n * @param propertiesSchema The schema of the properties to store.\n * @category Adapter\n */\nexport const storePropertiesSchema = (store: TinyBaseStore, tableId: Hex, propertiesSchema: PropertiesSchema) => {\n  store.setTable(`table__${tableId}`, {\n    propertiesSchema,\n  });\n};\n\n/**\n * Get the properties schema of a table stored inside the TinyBase store.\n *\n * Note: This is used when decoding logs inside the storage adapter, as it requires the properties schema to decode each property.\n *\n * @param store The regular TinyBase store.\n * @param tableId The id of the table for which to get the properties schema.\n * @returns The properties schema of the table.\n * @category Adapter\n */\nexport const getPropertiesSchema = (store: TinyBaseStore, tableId: Hex): PropertiesSchema => {\n  const row = store.getRow(`table__${tableId}`, \"propertiesSchema\");\n  if (Object.keys(row).length === 0) throw new Error(`Table with id ${tableId} is empty`);\n\n  return row as PropertiesSchema;\n};\n","/**\n * List of metadata properties encoded as hex strings, to treat them differently in the store.\n *\n * Specifically, these properties do not need any encoding/decoding when stored with TinyBase, as they are treated as\n * strings.\n *\n * @category Tables\n */\nexport const metadataProperties = [\"__staticData\", \"__encodedLengths\", \"__dynamicData\"];\n\n/**\n * List of local offchain properties, provided as utilities for storage, synchronization, and any internal purposes that can\n * enhance the developer experience.\n *\n * @category Tables\n */\nexport const localProperties = [\"__lastSyncedAtBlock\"];\n","import type { SchemaToPrimitives } from \"@latticexyz/protocol-parser/internal\";\nimport { concatHex, decodeAbiParameters, encodeAbiParameters, type Hex, isHex, size, sliceHex } from \"viem\";\n\nimport type { AbiToKeySchema, KeySchema } from \"@/tables/contract\";\nimport type { Properties } from \"@/tables\";\n\n// (jsdocs)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { createTableKeyMethods } from \"@/tables/contract\";\n\n/**\n * A record is a string that represents a tuple of hex keys, to identify a row in a table.\n *\n * Note: Replaces RECS Entity.\n *\n * @category Record\n */\n// TODO(review): This was a string before, but shouldn't it be a hex string?\nexport type $Record = Hex & { readonly __opaque__: \"$Record\" };\n\n/**\n * A singleton $Record associated with a table including a single row.\n *\n * Note: Replaces RECS singletonEntity.\n *\n * @category Record\n */\nexport const default$Record = hexKeyTupleTo$Record([]);\n\n/**\n * Concatenate a tuple of hex keys into a single record.\n *\n * Note: This is used when decoding a log inside the storage adapter to get the concerned record.\n *\n * @param hexKeyTuple Tuple of hex keys.\n * @returns A single record.\n *\n * @category Record\n */\nexport function hexKeyTupleTo$Record(hexKeyTuple: readonly Hex[]): $Record {\n  return concatHex(hexKeyTuple as Hex[]) as $Record;\n}\n\n/**\n * Convert a record into a tuple of hex keys.\n *\n * @param $record A single record.\n * @returns Tuple of hex keys.\n *\n * @category Record\n */\nexport function $recordToHexKeyTuple($record: $Record): readonly Hex[] {\n  if (!isHex($record)) {\n    throw new Error(`$record ${$record} is not a hex string`);\n  }\n  const length = size($record);\n  if (length % 32 !== 0) {\n    throw new Error(`$record length ${length} is not a multiple of 32 bytes`);\n  }\n  return new Array(length / 32).fill(0).map((_, index) => sliceHex($record, index * 32, (index + 1) * 32));\n}\n\n/**\n * Concatenate a tuple of hex keys into a single record, after encoding them into hex strings.\n *\n * Note: This is especially useful when trying to retrieve a record using its separate key properties, as it is done in the table key\n * methods attached to contract tables (see {@link createTableKeyMethods}).\n *\n * @category Record\n */\nexport const encode$Record = <KS extends KeySchema, T = unknown>(\n  keySchema: KS,\n  keys: Properties<AbiToKeySchema<KS>, T>,\n) => {\n  if (Object.keys(keySchema).length !== Object.keys(keys).length) {\n    throw new Error(\n      `$record length ${Object.keys(keys).length} does not match $record schema length ${Object.keys(keySchema).length}`,\n    );\n  }\n\n  return hexKeyTupleTo$Record(\n    // TODO(review): \"Type 'string | number | bigint | boolean' is not assignable to type 'number | bigint | boolean | `0x${string}`'\"\n    // Basically here it considers that `type` won't be of an ABI type that allows `keys[keyName]` to be a string; not sure what to do exactly about it\n    Object.entries(keySchema).map(([keyName, type]) =>\n      encodeAbiParameters([{ type }], [keys[keyName] as number | bigint | boolean | Hex]),\n    ),\n  );\n};\n\n/**\n * Decode a record into a tuple of hex keys, after decoding them from hex strings.\n *\n * Note: This is useful for retrieving the values of each separate key property from a record, using its schema and actual record string.\n *\n * @category Record\n */\nexport const decode$Record = <TKeySchema extends KeySchema>(\n  keySchema: TKeySchema,\n  $record: $Record,\n): SchemaToPrimitives<TKeySchema> => {\n  const hexKeyTuple = $recordToHexKeyTuple($record);\n  if (hexKeyTuple.length !== Object.keys(keySchema).length) {\n    throw new Error(\n      `$record $record tuple length ${hexKeyTuple.length} does not match $record schema length ${Object.keys(keySchema).length}`,\n    );\n  }\n\n  return Object.fromEntries(\n    Object.entries(keySchema).map(([$record, type], index) => [\n      $record,\n      decodeAbiParameters([{ type }], hexKeyTuple[index] as Hex)[0],\n    ]),\n  ) as SchemaToPrimitives<TKeySchema>;\n};\n\n/**\n * Convert an array into an iterable iterator.\n *\n * Note: This is used for providing an iterator for all records inside a table, and provide a similar\n * API to the one provided by RECS (entities iterator).\n *\n * @param array Any array.\n * @returns An iterable iterator.\n * @category Record\n */\nexport const arrayToIterator = <T>(array: T[]): IterableIterator<T> => {\n  let i = 0;\n\n  const iterator: Iterator<T> = {\n    next() {\n      if (i >= array.length) return { done: true, value: undefined };\n      return { done: false, value: array[i++] };\n    },\n  };\n\n  const iterable: IterableIterator<T> = {\n    ...iterator,\n    [Symbol.iterator]() {\n      return this;\n    },\n  };\n\n  return iterable;\n};\n","/**\n * Utility function to map a source object to an object with the same keys but mapped values\n *\n * @param source Source object to be mapped\n * @param valueMap Mapping values of the source object to values of the target object\n * @returns An object with the same keys as the source object but mapped values\n * @see [@]latticexyz/utils\n */\nexport function mapObject<S extends { [key: string]: unknown }, T extends { [key in keyof S]: unknown }>(\n  source: S,\n  valueMap: (value: S[keyof S], key: keyof S) => T[keyof S],\n): T {\n  const target: Partial<{ [key in keyof typeof source]: T[keyof S] }> = {};\n  for (const key in source) {\n    target[key] = valueMap(source[key], key);\n  }\n  return target as T;\n}\n","import type { $Record, TinyBaseStore } from \"@/lib\";\n\n/**\n * Create methods to handle the paused state of a table.\n *\n * @param store The regular TinyBase store.\n * @param tableId The id of the table for which to handle the paused status.\n * @returns The paused state methods (`set` and `get`).\n * @category Tables\n */\nexport const createTableMethodsUtils = (store: TinyBaseStore, tableId: string) => {\n  const paused = {\n    set: ($Record: $Record, paused: boolean) => {\n      store.setValue(`paused__${tableId}__${$Record}`, paused);\n    },\n    get: ($Record: $Record) => {\n      return store.getValue(`paused__${tableId}__${$Record}`);\n    },\n  };\n\n  return { paused };\n};\n","import { hexToResource, spliceHex } from \"@latticexyz/common\";\nimport { type Hex, size } from \"viem\";\nimport { Write } from \"@primodiumxyz/sync-stack\";\n\nimport { type StorageAdapterLog, TinyBaseAdapter } from \"@/adapter\";\nimport { debug, hexKeyTupleTo$Record, getPropertiesSchema, type Store } from \"@/lib\";\n\nexport const createCustomWriter = ({ store: _store }: { store: Store }) => {\n  const store = _store();\n  const processLog = (log: StorageAdapterLog) => {\n    const { namespace, name } = hexToResource(log.args.tableId);\n    const $record = hexKeyTupleTo$Record(log.args.keyTuple);\n\n    // Check if there are any properties registered for this table\n    const exists = store.hasTable(`table__${log.args.tableId}`);\n    if (!exists) {\n      debug(`unknown table: ${log.args.tableId} (${namespace}:${name})`);\n      return;\n    }\n\n    // Get the required entries for decoding\n    const table = {\n      id: log.args.tableId,\n      namespace,\n      name,\n      // We stored the properties schema for each contract table on creation for convenient access\n      propertiesSchema: getPropertiesSchema(store, log.args.tableId),\n    };\n\n    return { $record, table };\n  };\n\n  return Write.toCustom({\n    /* ----------------------------------- SET ---------------------------------- */\n    set: (log) => {\n      const processed = processLog(log);\n\n      if (!processed) return;\n      const { $record, table } = processed;\n\n      const properties = TinyBaseAdapter.decodeArgs(table.propertiesSchema, log.args);\n\n      debug(\"setting properties\", {\n        namespace: table.namespace,\n        name: table.name,\n        $record,\n        properties,\n      });\n\n      store.setRow(table.id, $record, {\n        ...properties,\n        __staticData: log.args.staticData,\n        __encodedLengths: log.args.encodedLengths,\n        __dynamicData: log.args.dynamicData,\n        __lastSyncedAtBlock: log.blockNumber?.toString() ?? \"unknown\",\n      });\n    },\n    /* --------------------------------- STATIC --------------------------------- */\n    updateStatic: (log) => {\n      const processed = processLog(log);\n      if (!processed) return;\n      const { $record, table } = processed;\n\n      const previousProperties = store.getRow(table.id, $record);\n      const previousStaticData = (previousProperties?.__staticData as Hex) ?? \"0x\";\n      const newStaticData = spliceHex(previousStaticData, log.args.start, size(log.args.data), log.args.data);\n      const newProperties = TinyBaseAdapter.decodeArgs(table.propertiesSchema, {\n        staticData: newStaticData,\n        encodedLengths: (previousProperties?.__encodedLengths as Hex) ?? \"0x\",\n        dynamicData: (previousProperties?.__dynamicData as Hex) ?? \"0x\",\n      });\n\n      debug(\"setting properties via splice static\", {\n        namespace: table.namespace,\n        name: table.name,\n        $record,\n        previousStaticData,\n        newStaticData,\n        previousProperties,\n        newProperties,\n      });\n\n      store.setRow(table.id, $record, {\n        // We need to pass previous properties to keep the encodedLengths and dynamicData (if any)\n        // and be consistent with RECS\n        ...previousProperties,\n        ...newProperties,\n        __staticData: newStaticData,\n        __lastSyncedAtBlock: log.blockNumber?.toString() ?? \"unknown\",\n      });\n    },\n    /* --------------------------------- DYNAMIC -------------------------------- */\n    updateDynamic: (log) => {\n      const processed = processLog(log);\n      if (!processed) return;\n      const { $record, table } = processed;\n\n      const previousProperties = store.getRow(table.id, $record);\n      const previousDynamicData = (previousProperties?.__dynamicData as Hex) ?? \"0x\";\n      const newDynamicData = spliceHex(previousDynamicData, log.args.start, log.args.deleteCount, log.args.data);\n      const newProperties = TinyBaseAdapter.decodeArgs(table.propertiesSchema, {\n        staticData: (previousProperties?.__staticData as Hex) ?? \"0x\",\n        encodedLengths: log.args.encodedLengths,\n        dynamicData: newDynamicData,\n      });\n\n      debug(\"setting properties via splice dynamic\", {\n        namespace: table.namespace,\n        name: table.name,\n        $record,\n        previousDynamicData,\n        newDynamicData,\n        previousProperties,\n        newProperties,\n      });\n\n      store.setRow(table.id, $record, {\n        ...newProperties,\n        __encodedLengths: log.args.encodedLengths,\n        __dynamicData: newDynamicData,\n        __lastSyncedAtBlock: log.blockNumber?.toString() ?? \"unknown\",\n      });\n    },\n    /* --------------------------------- DELETE --------------------------------- */\n    delete: (log) => {\n      const processed = processLog(log);\n      if (!processed) return;\n      const { $record, table } = processed;\n\n      debug(\"deleting properties\", {\n        namespace: table.namespace,\n        name: table.name,\n        $record,\n      });\n\n      store.delRow(table.id, $record);\n    },\n  });\n};\n","// Modified from https://github.com/latticexyz/mud/blob/ade94a7fa761070719bcd4b4dac6cb8cc7783c3b/packages/protocol-parser/src/decodeValueArgs.ts#L8\n\nimport { concatHex } from \"viem\";\nimport { isDynamicAbiType, isStaticAbiType } from \"@latticexyz/schema-type/internal\";\nimport {\n  decodeDynamicField,\n  decodeStaticField,\n  hexToEncodedLengths,\n  type Schema,\n  type SchemaToPrimitives,\n  staticDataLength,\n  type ValueArgs,\n} from \"@latticexyz/protocol-parser/internal\";\nimport { readHex } from \"@latticexyz/common\";\nimport {\n  type StaticPrimitiveType,\n  type DynamicPrimitiveType,\n  staticAbiTypeToByteLength,\n  dynamicAbiTypeToDefaultValue,\n} from \"@latticexyz/schema-type/internal\";\nimport { type Hex } from \"viem\";\n\nimport { encodePropertiesToTinyBase } from \"@/adapter/encodePropertiesToTinyBase\";\nimport { type PropertiesSchema } from \"@/tables/contract\";\n\n/**\n * Decode the properties of a record from the data inside a log.\n *\n * This is an unmodified version of the original MUD function.\n *\n * @template TSchema The schema of the properties to decode.\n * @param propertiesSchema The schema of the properties to decode.\n * @param args The encoded metadata to decode the properties from.\n * @returns The decoded properties.\n * @see [@]latticexyz/protocol-parser/internal/decodeValueArgs.ts\n * @category Adapter\n */\nexport function decodeValueArgs<TSchema extends PropertiesSchema>(\n  propertiesSchema: TSchema,\n  args: ValueArgs,\n): SchemaToPrimitives<TSchema> {\n  const { staticData, encodedLengths, dynamicData } = args;\n  return decodeValue(\n    propertiesSchema,\n    concatHex([\n      readHex(staticData, 0, staticDataLength(Object.values(propertiesSchema).filter(isStaticAbiType))),\n      encodedLengths,\n      dynamicData,\n    ]),\n  );\n}\n\n/**\n * Decode the properties of a record from its hex metadata.\n *\n * This is an slightly modified version of the original MUD function.\n * The only difference is that the data is encoded to fit a TinyBase table when set inside the storage adapter.\n *\n * The properties will be appended with their types (e.g. `type__count` for `count`; or { count: 1 } will produce { type__count: \"number\" }).\n *\n * @template TSchema The schema of the properties to decode.\n * @param propertiesSchema The schema of the properties to decode.\n * @param data The encoded hex data to decode the properties from.\n * @returns The decoded properties in a TinyBase-friendly format.\n * @see [@]latticexyz/protocol-parser/internal/decodeValue.ts\n * @see {@link encodePropertiesToTinyBase}\n * @category Adapter\n */\nexport function decodeValue<TSchema extends PropertiesSchema>(\n  propertiesSchema: TSchema,\n  data: Hex,\n): SchemaToPrimitives<TSchema> {\n  const staticFields = Object.values(propertiesSchema).filter(isStaticAbiType);\n  const dynamicFields = Object.values(propertiesSchema).filter(isDynamicAbiType);\n\n  const valueTuple = decodeRecord({ staticFields, dynamicFields }, data);\n  // Modified: encode for TinyBase\n  // This will include formatted values + their types (e.g. `type__name` for `name`)\n  return encodePropertiesToTinyBase(\n    Object.fromEntries(Object.keys(propertiesSchema).map((key, i) => [key, valueTuple[i]])),\n  ) as SchemaToPrimitives<TSchema>;\n}\n\n/**\n * Decode the static and dynamic properties of a record from its hex data and type (dynamic or static).\n *\n * This is an unmodified version of the original MUD function.\n *\n * @param propertiesSchema The schema of the properties to decode.\n * @param data The encoded hex data to decode the properties from.\n * @returns The decoded properties.\n * @see [@]latticexyz/protocol-parser/internal/decodeRecord.ts\n * @category Adapter\n */\nexport function decodeRecord(\n  propertiesSchema: Schema,\n  data: Hex,\n): readonly (StaticPrimitiveType | DynamicPrimitiveType)[] {\n  const properties: (StaticPrimitiveType | DynamicPrimitiveType)[] = [];\n\n  let bytesOffset = 0;\n  propertiesSchema.staticFields.forEach((fieldType) => {\n    const fieldByteLength = staticAbiTypeToByteLength[fieldType];\n    const prop = decodeStaticField(fieldType, readHex(data, bytesOffset, bytesOffset + fieldByteLength));\n    bytesOffset += fieldByteLength;\n    properties.push(prop);\n  });\n\n  // Warn user if static data length doesn't match the value schema, because data corruption might be possible.\n  const schemaStaticDataLength = staticDataLength(propertiesSchema.staticFields);\n  const actualStaticDataLength = bytesOffset;\n  if (actualStaticDataLength !== schemaStaticDataLength) {\n    console.warn(\n      \"Decoded static data length does not match value schema's expected static data length. Data may get corrupted. Is `getStaticByteLength` outdated?\",\n      {\n        expectedLength: schemaStaticDataLength,\n        actualLength: actualStaticDataLength,\n        bytesOffset,\n      },\n    );\n  }\n\n  if (propertiesSchema.dynamicFields.length > 0) {\n    const dataLayout = hexToEncodedLengths(readHex(data, bytesOffset, bytesOffset + 32));\n    bytesOffset += 32;\n\n    propertiesSchema.dynamicFields.forEach((fieldType, i) => {\n      const dataLength = dataLayout.fieldByteLengths[i];\n      if (dataLength > 0) {\n        const prop = decodeDynamicField(fieldType, readHex(data, bytesOffset, bytesOffset + dataLength));\n        bytesOffset += dataLength;\n        properties.push(prop);\n      } else {\n        properties.push(dynamicAbiTypeToDefaultValue[fieldType]);\n      }\n    });\n\n    // Warn user if dynamic data length doesn't match the dynamic data length, because data corruption might be possible.\n    const actualDynamicDataLength = bytesOffset - 32 - actualStaticDataLength;\n    // TODO(MUD): refactor this so we don't break for bytes offsets >UINT40\n    if (BigInt(actualDynamicDataLength) !== dataLayout.totalByteLength) {\n      console.warn(\n        \"Decoded dynamic data length does not match data layout's expected data length. Data may get corrupted. Did the data layout change?\",\n        {\n          expectedLength: dataLayout.totalByteLength,\n          actualLength: actualDynamicDataLength,\n          bytesOffset,\n        },\n      );\n    }\n  }\n\n  return properties;\n}\n","import type { Primitive, TinyBaseFormattedType } from \"@/adapter\";\n\n// We want to encode the original type as well when dealing with local tables, because we\n// don't have a schema to rely on. And we don't care that much about the schema, because that's TypeScript types we want.\n/**\n * Encode the properties of a record to a TinyBase-friendly format.\n *\n * This will serialize arrays (bigints, numbers, booleans) and record their type, as we can't store them inside a TinyBase table.\n *\n * @param propKeys The keys of the properties to encode.\n * @param propAttributes The properties to encode.\n * @returns\n */\nexport const encodePropertiesToTinyBase = (properties: Record<string, Primitive>): TinyBaseFormattedType => {\n  const formattedProperties: TinyBaseFormattedType = {};\n\n  // Go through each property (key-attribute pair)\n  Object.entries(properties).forEach(([key, prop]) => {\n    // Find its TypeScript type\n    const propType = Array.isArray(prop) ? `${typeof prop[0]}[]` : typeof prop;\n\n    // Serialize arrays (bigints, numbers, booleans), and turn bigints into strings\n    formattedProperties[key] = (\n      Array.isArray(prop)\n        ? JSON.stringify(prop, (_, v) => (typeof v === \"bigint\" ? v.toString() : v))\n        : typeof prop === \"bigint\"\n          ? prop.toString()\n          : prop\n    ) as TinyBaseFormattedType[keyof TinyBaseFormattedType];\n\n    // Record type\n    formattedProperties[`type__${key}`] = propType;\n  });\n\n  return formattedProperties;\n};\n","import { type Hex } from \"viem\";\n\nimport type { DecodedTinyBaseType, TinyBaseFormattedType } from \"@/adapter\";\nimport { localProperties, metadataProperties } from \"@/lib\";\n\n// (jsdocs)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { encodePropertiesToTinyBase } from \"./encodePropertiesToTinyBase\";\n\n// We can ignore these keys as they either don't need to be decoded (metadataProperties) or represent type information\nconst ignoreKey = (key: string) => metadataProperties.concat(localProperties).includes(key) || key.startsWith(\"type__\");\n\n/**\n * Decode the properties of a record from its TinyBase-formatted cells.\n *\n * This will look for the type of each property, as they were provided during encoding (see {@link encodePropertiesToTinyBase}), and decode it accordingly.\n *\n * @param formattedProperties The properties from TinyBase storage to decode.\n * @returns The decoded properties.\n * @example\n * This example decodes a simple TinyBase-formatted record.\n *\n * ```ts\n * const formattedProperties = {\n *   count: 1,\n *   type__count: \"number\",\n *   items: \"[1, 2, 3]\",\n *   type__items: \"number[]\",\n *   __staticData: 0x...,\n *   __dynamicData: 0x...,\n *   __encodedLengths: 0x...,\n *   __lastSyncedAtBlock: \"1234567890\",\n * };\n *\n * const decodedProperties = decodePropertiesFromTinyBase(formattedProperties);\n * console.log(decodedProperties);\n * // -> { count: 1, items: [1, 2, 3], __staticData: 0x..., __dynamicData: 0x..., __encodedLengths: 0x..., __lastSyncedAtBlock: 1234567890n }\n * ```\n * @category Adapter\n */\nexport const decodePropertiesFromTinyBase = (formattedProperties: TinyBaseFormattedType): DecodedTinyBaseType => {\n  if (Object.keys(formattedProperties).length === 0) return undefined;\n  const decodedProperties: DecodedTinyBaseType = {};\n\n  Object.entries(formattedProperties).forEach(([key, prop]) => {\n    // Ignore metadata keys (don't need to decode them) and type information\n    if (!ignoreKey(key)) {\n      // Find the type associated with this possibly encoded property\n      const type = formattedProperties[`type__${key}`];\n      if (!type) throw new Error(`Type information missing for key: ${key}`);\n\n      // Decode the property based on its type\n      if (type === \"bigint\") {\n        decodedProperties[key] = BigInt(prop as string);\n      } else if (type === \"number\" || type === \"boolean\" || type === \"string\") {\n        // These kept their original type\n        decodedProperties[key] = prop;\n      } else if (type === \"bigint[]\") {\n        decodedProperties[key] = JSON.parse(prop as string).map(BigInt);\n      } else if (type === \"number[]\") {\n        decodedProperties[key] = JSON.parse(prop as string).map(Number);\n      } else if (type === \"boolean[]\") {\n        decodedProperties[key] = JSON.parse(prop as string).map((v: string) => v === \"true\");\n      } else if (type === \"string[]\") {\n        decodedProperties[key] = JSON.parse(prop as string);\n      } else if (type === \"undefined[]\") {\n        // Fallbacks just in case\n        decodedProperties[key] = JSON.parse(prop as string).map(() => undefined);\n      } else if (type === \"undefined\") {\n        decodedProperties[key] = undefined;\n      }\n    }\n\n    // Write the metadata properties as they are\n    metadataProperties.forEach((encodedKey) => {\n      decodedProperties[encodedKey] = formattedProperties[encodedKey] as Hex;\n    });\n\n    // Write the last block at which the table was synced (this is either a bigint or \"unknown\")\n    const lastSynced = formattedProperties[\"__lastSyncedAtBlock\"];\n    decodedProperties[\"__lastSyncedAtBlock\"] = lastSynced && lastSynced !== \"unknown\" ? BigInt(lastSynced) : undefined;\n  });\n\n  return decodedProperties;\n};\n","export { createCustomWriter as createStorageAdapter } from \"@/adapter/createCustomWriter\";\nexport * from \"@/adapter/types\";\n\nimport { decodeValueArgs } from \"@/adapter/decodeValueArgs\";\nimport { decodePropertiesFromTinyBase } from \"@/adapter/decodePropertiesFromTinyBase\";\nimport { encodePropertiesToTinyBase } from \"@/adapter/encodePropertiesToTinyBase\";\n\nexport const TinyBaseAdapter = {\n  decodeArgs: decodeValueArgs,\n  decode: decodePropertiesFromTinyBase,\n  encode: encodePropertiesToTinyBase,\n};\n","import type { GetResultCellChange, ResultRow } from \"tinybase/queries\";\n\nimport type { Properties } from \"@/tables\";\nimport type { UpdateType } from \"@/queries\";\nimport { TinyBaseAdapter, type TinyBaseFormattedType } from \"@/adapter\";\nimport { type $Record, type Schema, localProperties, metadataProperties } from \"@/lib\";\n\n/**\n * Get the current and previous properties, and infer the type of update from a row change.\n *\n * This uses the TinyBase store {@link GetResultCellChange} function to retrieve the specific changes in a cell.\n *\n * @param getCellChange Native TinyBase function to get the changes in a cell.\n * @param keys The list of keys for each cell to get the changes for (to get the full properties object).\n * @param tableId The id of the table.\n * @param $record The record that changed.\n * @returns The id of the table, the record, the properties object with the current and previous properties, and the type of update.\n * @category Queries\n */\nexport const getPropertiesAndTypeFromRowChange = <S extends Schema, T = unknown>(\n  getCellChange: GetResultCellChange,\n  keys: string[],\n  tableId: string,\n  $record: $Record,\n) => {\n  let type = \"change\" as UpdateType;\n  // Add the type information to the keys\n  keys = keys\n    .map((key) => (metadataProperties.includes(key) ? key : [key, `type__${key}`]))\n    .flat()\n    // Add any internal keys (utilities)\n    .concat(localProperties);\n\n  // Get the old and new rows\n  const { current: newRow, prev: previousRow } = keys.reduce(\n    (acc, key) => {\n      const [, oldValueAtKey, newValueAtKey] = getCellChange(tableId, $record, key);\n      acc.current[key] = newValueAtKey as ResultRow[typeof key];\n      acc.prev[key] = oldValueAtKey as ResultRow[typeof key];\n\n      return acc;\n    },\n    { current: {}, prev: {} } as { current: ResultRow; prev: ResultRow },\n  );\n\n  // Find if it's an entry or an exit\n  if (Object.values(newRow).every((v) => v === undefined)) {\n    type = \"exit\";\n  } else if (Object.values(previousRow).every((v) => v === undefined)) {\n    type = \"enter\";\n  }\n\n  // Parse the properties\n  const newProperties =\n    type === \"exit\" ? undefined : (TinyBaseAdapter.decode(newRow as TinyBaseFormattedType) as Properties<S, T>);\n  const prevProperties =\n    type === \"enter\" ? undefined : (TinyBaseAdapter.decode(previousRow as TinyBaseFormattedType) as Properties<S, T>);\n\n  return { tableId, $record, properties: { current: newProperties, prev: prevProperties }, type };\n};\n","import { createStore as createTinyBaseStore, type Store as TinyBaseStore } from \"tinybase/store\";\nimport { createQueries, type Queries as TinyBaseQueries } from \"tinybase/queries\";\nimport { createLocalPersister } from \"tinybase/persisters/persister-browser\";\nexport type { TinyBaseStore, TinyBaseQueries }; // for more explicit types\n\n/**\n * Defines a native non-persistent TinyBase store, appended with its associated queries object.\n *\n * @category Tables\n */\ntype BaseStore = TinyBaseStore & {\n  getQueries: () => TinyBaseQueries;\n};\n\n/**\n * Defines a persistent TinyBase store, appended with its associated queries object, and additional methods to dispose of\n * the synchronization with the local storage and to check if the sync is ready.\n *\n * @category Tables\n */\ntype PersistentStore = BaseStore & {\n  dispose: () => void;\n  ready: Promise<boolean>;\n};\n\n/**\n * Defines a function that returns a TinyBase store, either a base store or a persistent store.\n *\n * Note: The persistent store is only available on the browser.\n *\n * Note: The persistent store can be used for storing properties inside a local table.\n *\n * @category Tables\n */\nexport type Store = {\n  (): BaseStore;\n  (key: \"PERSIST\"): PersistentStore;\n};\n\n// The local storage key for the persistent store's data\nconst STORAGE_KEY = \"TINYBASE_STATE_MANAGER_PERSISTER\";\n\n/**\n * Creates a function that returns a TinyBase store, either a base store or a persistent store.\n *\n * @returns The {@link Store} function.\n * @see {@link BaseStore} and {@link PersistentStore} for additional methods.\n * @category Tables\n */\nexport const createStore = () => {\n  // Create base store and queries object for contract and non-persistent local tables\n  const store = createTinyBaseStore();\n  const queries = createQueries(store);\n\n  // Same for persistent tables\n  // We don't want to setup the browser persister in node\n  const isBrowser = typeof window !== \"undefined\";\n  const getPersistentStore = (): PersistentStore => {\n    if (!isBrowser) {\n      throw new Error(\"Persistent store is only available on the browser\");\n    }\n\n    const persistentStore = createTinyBaseStore();\n    const persistentQueries = createQueries(persistentStore);\n\n    // Setup the storage persister on local storage\n    const persister = createLocalPersister(persistentStore, STORAGE_KEY, (err: unknown) => {\n      console.warn(\"Error persisting state, some settings might no be saved correctly\");\n      console.error(err);\n    });\n\n    // Enable autosave and autoload\n    // We don't want to make the whole wrapper async so we can just let the consumr know when it's ready\n    (async () => {\n      persistentStore.setValue(\"ready\", false);\n      await persister.startAutoLoad();\n      await persister.startAutoSave();\n      persistentStore.setValue(\"ready\", true);\n    })();\n\n    return {\n      ...persistentStore,\n      getQueries: () => persistentQueries,\n      dispose: () => persister.destroy(),\n      // Return a promise that resolves when the store is ready\n      ready: new Promise((resolve: (value: boolean) => void) => {\n        // either if it's already ready\n        if (persistentStore.getValue(\"ready\")) resolve(true);\n\n        // or listen to change on the ready value and resolve when it is\n        const listener = persistentStore.addValueListener(\"ready\", (_, __, ready) => {\n          if (ready) {\n            persistentStore.delListener(listener);\n            resolve(true);\n          }\n        });\n      }),\n    };\n  };\n\n  function getStore(): BaseStore;\n  function getStore(key: \"PERSIST\"): PersistentStore;\n  function getStore(key?: \"PERSIST\"): BaseStore | PersistentStore {\n    // Access the persistent store if the key is provided\n    if (key === \"PERSIST\") {\n      return getPersistentStore();\n    } else {\n      // Otherwise, return the regular store\n      return {\n        ...store,\n        getQueries: () => queries,\n      };\n    }\n  }\n\n  return getStore;\n};\n","import createDebug from \"debug\";\n\nexport const debug = createDebug(\"primodium:reactive-tables\");\nexport const error = createDebug(\"primodium:reactive-tables\");\n// Pipe debug output to stdout instead of stderr\ndebug.log = console.debug.bind(console);\n// Pipe error output to stderr\nerror.log = console.error.bind(console);\n","import type { Store as MUDStoreConfig } from \"@latticexyz/store\";\nimport type { Table as MUDTableDef, Tables as MUDTableDefs } from \"@latticexyz/store/internal\";\nimport { type ResolvedStoreConfig, resolveConfig } from \"@latticexyz/store/config\";\nimport { storeToV1 } from \"@latticexyz/store/config/v2\";\n\n/**\n * Defines the MUD store configuration provided to the wrapper.\n *\n * @category Tables\n */\nexport type StoreConfig = MUDStoreConfig;\n\n/**\n * Defines a contract table definition initially provided to the wrapper.\n *\n * @param tableId The id of the table.\n * @param namespace The namespace of the table inside the global scope.\n * @param name The name of the table.\n * @param keySchema The schema of the keys to differenciate records.\n * @param valueSchema The schema of the properties associated with each record.\n * @category Tables\n */\nexport type ContractTableDef = MUDTableDef;\n/**\n * Defines a mapping of strings to their {@link ContractTableDef}, as initially provided to the wrapper.\n *\n * @category Tables\n */\nexport type ContractTableDefs = MUDTableDefs;\n\n// (jsdocs)\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nimport { WrapperOptions } from \"@/createWrapper\";\n\n// Import and resolve MUD base store & world tables definitions\nimport storeConfig from \"@latticexyz/store/mud.config\";\nimport worldConfig from \"@latticexyz/world/mud.config\";\nexport const storeTableDefs = resolveConfig(storeToV1(storeConfig)).tables;\nexport const worldTableDefs = resolveConfig(storeToV1(worldConfig)).tables;\n\n/**\n * Defines the union of definitions from the provided MUD configuration, original\n * MUD store and world configurations resolved into tables definitions, and any additional defs provided by the consumer.\n *\n * This type is used to extract types out of all tables definitions relevant to the registry, to provide type safety\n * for constant data such as schemas, keys, and other table metadata (e.g. namespace).\n *\n * @template config The type of the MUD configuration provided to the wrapper.\n * @template extraTableDefs The type of any additional contract tables definitions provided to the wrapper.\n * @see {@link WrapperOptions}\n * @see {@link storeTableDefs}\n * @see {@link worldTableDefs}\n * @category Tables\n */\nexport type AllTableDefs<\n  config extends StoreConfig,\n  extraTableDefs extends ContractTableDefs | undefined = undefined,\n> = ResolvedStoreConfig<storeToV1<config>>[\"tables\"] &\n  (extraTableDefs extends ContractTableDefs ? extraTableDefs : Record<string, never>) &\n  typeof storeTableDefs &\n  typeof worldTableDefs;\n","export const SYSTEM_DEFAULTS = {\n  registerFunctionSelector: true,\n  openAccess: true,\n  accessList: [] as string[],\n} as const;\n\nexport type SYSTEM_DEFAULTS = typeof SYSTEM_DEFAULTS;\n\nexport const WORLD_DEFAULTS = {\n  worldContractName: undefined,\n  worldInterfaceName: \"IWorld\",\n  systems: {} as Record<string, never>,\n  excludeSystems: [] as string[],\n  postDeployScript: \"PostDeploy\",\n  deploysDirectory: \"./deploys\",\n  worldsFile: \"./worlds.json\",\n  worldgenDirectory: \"world\",\n  worldImportPath: \"@latticexyz/world/src/\",\n  modules: [] as [],\n} as const;\n\nexport type WORLD_DEFAULTS = typeof WORLD_DEFAULTS;\n","import { ErrorMessage, conform, evaluate, narrow } from \"@arktype/util\";\nimport {\n  UserTypes,\n  extendedScope,\n  get,\n  resolveTable,\n  validateTable,\n  mergeIfUndefined,\n  validateTables,\n  resolveStore,\n  Store,\n  hasOwnKey,\n  validateStore,\n  isObject,\n} from \"@latticexyz/store/config/v2\";\nimport { SystemsInput, WorldInput } from \"./input\";\nimport { CONFIG_DEFAULTS } from \"./defaults\";\nimport { Tables } from \"@latticexyz/store/internal\";\nimport { resolveSystems } from \"./systems\";\nimport { resolveNamespacedTables } from \"./namespaces\";\nimport { resolveCodegen } from \"./codegen\";\nimport { resolveDeploy } from \"./deploy\";\n\nexport type validateWorld<world> = {\n  readonly [key in keyof world]: key extends \"tables\"\n    ? validateTables<world[key], extendedScope<world>>\n    : key extends \"userTypes\"\n      ? UserTypes\n      : key extends \"enums\"\n        ? narrow<world[key]>\n        : key extends \"namespaces\"\n          ? // ? validateNamespaces<world[key], extendedScope<world>>\n            ErrorMessage<`Namespaces config will be enabled soon.`>\n          : key extends keyof WorldInput\n            ? conform<world[key], WorldInput[key]>\n            : world[key];\n};\n\nexport function validateWorld(world: unknown): asserts world is WorldInput {\n  const scope = extendedScope(world);\n  validateStore(world);\n\n  if (hasOwnKey(world, \"namespaces\")) {\n    if (!isObject(world.namespaces)) {\n      throw new Error(`Expected namespaces, received ${JSON.stringify(world.namespaces)}`);\n    }\n    for (const namespace of Object.values(world.namespaces)) {\n      if (hasOwnKey(namespace, \"tables\")) {\n        validateTables(namespace.tables, scope);\n      }\n    }\n  }\n}\n\nexport type resolveWorld<world> = evaluate<\n  resolveStore<world> &\n    mergeIfUndefined<\n      { tables: resolveNamespacedTables<world> } & Omit<\n        {\n          [key in keyof world]: key extends \"systems\"\n            ? resolveSystems<world[key] & SystemsInput>\n            : key extends \"deploy\"\n              ? resolveDeploy<world[key]>\n              : key extends \"codegen\"\n                ? resolveCodegen<world[key]>\n                : world[key];\n        },\n        \"namespaces\" | keyof Store\n      >,\n      CONFIG_DEFAULTS\n    >\n>;\n\nexport function resolveWorld<const world extends WorldInput>(world: world): resolveWorld<world> {\n  const scope = extendedScope(world);\n  const namespaces = world.namespaces ?? {};\n\n  const resolvedNamespacedTables = Object.fromEntries(\n    Object.entries(namespaces)\n      .map(([namespaceKey, namespace]) =>\n        Object.entries(namespace.tables ?? {}).map(([tableKey, table]) => {\n          validateTable(table, scope);\n          return [\n            `${namespaceKey}__${tableKey}`,\n            resolveTable(mergeIfUndefined(table, { namespace: namespaceKey, name: tableKey }), scope),\n          ];\n        }),\n      )\n      .flat(),\n  ) as Tables;\n\n  const resolvedStore = resolveStore(world);\n\n  return mergeIfUndefined(\n    {\n      ...resolvedStore,\n      tables: { ...resolvedStore.tables, ...resolvedNamespacedTables },\n      codegen: mergeIfUndefined(resolvedStore.codegen, resolveCodegen(world.codegen)),\n      deploy: resolveDeploy(world.deploy),\n      systems: resolveSystems(world.systems ?? CONFIG_DEFAULTS.systems),\n      excludeSystems: get(world, \"excludeSystems\"),\n      modules: world.modules,\n    },\n    CONFIG_DEFAULTS,\n  ) as never;\n}\n\nexport function defineWorld<const world>(world: validateWorld<world>): resolveWorld<world> {\n  validateWorld(world);\n  return resolveWorld(world) as never;\n}\n","export const SYSTEM_DEFAULTS = {\n  registerFunctionSelectors: true,\n  openAccess: true,\n  accessList: [] as string[],\n} as const;\n\nexport type SYSTEM_DEFAULTS = typeof SYSTEM_DEFAULTS;\n\nexport const CODEGEN_DEFAULTS = {\n  worldInterfaceName: \"IWorld\",\n  worldgenDirectory: \"world\",\n  worldImportPath: \"@latticexyz/world/src/\",\n} as const;\n\nexport type CODEGEN_DEFAULTS = typeof CODEGEN_DEFAULTS;\n\nexport const DEPLOY_DEFAULTS = {\n  customWorldContract: undefined,\n  postDeployScript: \"PostDeploy\",\n  deploysDirectory: \"./deploys\",\n  worldsFile: \"./worlds.json\",\n} as const;\n\nexport type DEPLOY_DEFAULTS = typeof DEPLOY_DEFAULTS;\n\nexport const CONFIG_DEFAULTS = {\n  systems: {},\n  tables: {},\n  excludeSystems: [] as string[],\n  modules: [],\n  codegen: CODEGEN_DEFAULTS,\n  deploy: DEPLOY_DEFAULTS,\n} as const;\n\nexport type CONFIG_DEFAULTS = typeof CONFIG_DEFAULTS;\n","import { mapObject } from \"@latticexyz/common/utils\";\nimport { SYSTEM_DEFAULTS } from \"../defaults\";\nimport { SystemsInput } from \"./input\";\nimport { mergeIfUndefined } from \"@latticexyz/store/config/v2\";\n\nexport type resolveSystems<systems extends SystemsInput> = {\n  [system in keyof systems]: mergeIfUndefined<systems[system], typeof SYSTEM_DEFAULTS>;\n};\n\nexport function resolveSystems<systems extends SystemsInput>(systems: systems): resolveSystems<systems> {\n  return mapObject(systems, (system) => mergeIfUndefined(system, SYSTEM_DEFAULTS));\n}\n","import { isObject, mergeIfUndefined } from \"@latticexyz/store/config/v2\";\nimport { CODEGEN_DEFAULTS } from \"./defaults\";\n\nexport type resolveCodegen<codegen> = codegen extends {}\n  ? mergeIfUndefined<codegen, CODEGEN_DEFAULTS>\n  : CODEGEN_DEFAULTS;\n\nexport function resolveCodegen<codegen>(codegen: codegen): resolveCodegen<codegen> {\n  return (isObject(codegen) ? mergeIfUndefined(codegen, CODEGEN_DEFAULTS) : CODEGEN_DEFAULTS) as never;\n}\n","import { mergeIfUndefined, isObject } from \"@latticexyz/store/config/v2\";\nimport { DEPLOY_DEFAULTS } from \"./defaults\";\n\nexport type resolveDeploy<deploy> = deploy extends {} ? mergeIfUndefined<deploy, DEPLOY_DEFAULTS> : DEPLOY_DEFAULTS;\n\nexport function resolveDeploy<deploy>(deploy: deploy): resolveDeploy<deploy> {\n  return (isObject(deploy) ? mergeIfUndefined(deploy, DEPLOY_DEFAULTS) : DEPLOY_DEFAULTS) as never;\n}\n","import { defineWorld } from \"./ts/config/v2/world\";\n\nexport default defineWorld({\n  codegen: {\n    worldImportPath: \"../../\",\n    worldgenDirectory: \"interfaces\",\n    worldInterfaceName: \"IBaseWorld\",\n  },\n  namespace: \"world\" as const, // NOTE: this namespace is only used for tables, the core system is deployed in the root namespace.\n  userTypes: {\n    ResourceId: { filePath: \"@latticexyz/store/src/ResourceId.sol\", type: \"bytes32\" },\n  },\n  tables: {\n    NamespaceOwner: {\n      schema: {\n        namespaceId: \"ResourceId\",\n        owner: \"address\",\n      },\n      key: [\"namespaceId\"],\n    },\n    ResourceAccess: {\n      schema: {\n        resourceId: \"ResourceId\",\n        caller: \"address\",\n        access: \"bool\",\n      },\n      key: [\"resourceId\", \"caller\"],\n    },\n    InstalledModules: {\n      schema: {\n        moduleAddress: \"address\",\n        argumentsHash: \"bytes32\", // Hash of the params passed to the `install` function\n        isInstalled: \"bool\",\n      },\n      key: [\"moduleAddress\", \"argumentsHash\"],\n    },\n    UserDelegationControl: {\n      schema: {\n        delegator: \"address\",\n        delegatee: \"address\",\n        delegationControlId: \"ResourceId\",\n      },\n      key: [\"delegator\", \"delegatee\"],\n    },\n    NamespaceDelegationControl: {\n      schema: {\n        namespaceId: \"ResourceId\",\n        delegationControlId: \"ResourceId\",\n      },\n      key: [\"namespaceId\"],\n    },\n    Balances: {\n      schema: {\n        namespaceId: \"ResourceId\",\n        balance: \"uint256\",\n      },\n      key: [\"namespaceId\"],\n    },\n    Systems: {\n      schema: {\n        systemId: \"ResourceId\",\n        system: \"address\",\n        publicAccess: \"bool\",\n      },\n      key: [\"systemId\"],\n      codegen: {\n        dataStruct: false,\n      },\n    },\n    SystemRegistry: {\n      schema: {\n        system: \"address\",\n        systemId: \"ResourceId\",\n      },\n      key: [\"system\"],\n    },\n    SystemHooks: {\n      schema: {\n        systemId: \"ResourceId\",\n        value: \"bytes21[]\",\n      },\n      key: [\"systemId\"],\n    },\n    FunctionSelectors: {\n      schema: {\n        worldFunctionSelector: \"bytes4\",\n        systemId: \"ResourceId\",\n        systemFunctionSelector: \"bytes4\",\n      },\n      key: [\"worldFunctionSelector\"],\n      codegen: { dataStruct: false },\n    },\n    FunctionSignatures: {\n      type: \"offchainTable\",\n      schema: {\n        functionSelector: \"bytes4\",\n        functionSignature: \"string\",\n      },\n      key: [\"functionSelector\"],\n    },\n    InitModuleAddress: {\n      schema: {\n        value: \"address\",\n      },\n      key: [],\n    },\n  },\n  excludeSystems: [\n    // Worldgen currently does not support systems inheriting logic\n    // from other contracts, so all parts of RegistrationSystem are named\n    // System too to be included in the IBaseWorld interface.\n    // However, IStoreRegistrationSystem overlaps with IStore if\n    // included in IBaseWorld, so it needs to be excluded from worldgen.\n    // TODO: add support for inheritance to worldgen\n    // (see: https://github.com/latticexyz/mud/issues/631)\n    \"StoreRegistrationSystem\",\n  ],\n});\n"],"mappings":"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","names":["require_ms","__commonJSMin","exports","module","s","m","h","d","w","y","val","options","type","parse","fmtLong","fmtShort","str","match","n","ms","msAbs","plural","name","isPlural","require_common","__commonJSMin","exports","module","setup","env","createDebug","coerce","disable","enable","enabled","destroy","key","selectColor","namespace","hash","i","prevTime","enableOverride","namespacesCache","enabledCache","debug","args","self","curr","ms","index","match","format","formatter","val","extend","v","delimiter","newDebug","namespaces","split","len","toNamespace","name","regexp","require_browser","__commonJSMin","exports","module","formatArgs","save","load","useColors","localstorage","warned","args","c","index","lastC","match","namespaces","r","formatters","v","error","require_has_flag","__commonJSMin","exports","module","flag","argv","prefix","position","terminatorPosition","require_supports_color","__commonJSMin","exports","module","os","tty","hasFlag","env","flagForceColor","envForceColor","translateLevel","level","supportsColor","haveStream","streamIsTTY","sniffFlags","noFlagForceColor","forceColor","min","osRelease","sign","version","getSupportLevel","stream","options","require_node","__commonJSMin","exports","module","tty","util","init","log","formatArgs","save","load","useColors","supportsColor","key","obj","prop","_","k","val","args","name","c","colorCode","prefix","getDate","namespaces","debug","keys","i","formatters","v","str","require_src","__commonJSMin","exports","module","Type","schemaAbiTypeToRecsType","uuid","rand","_getRandomInt","hex","_hexAligner","x","n","num","length","str","i","z","storePropertiesSchema","store","tableId","propertiesSchema","getPropertiesSchema","row","metadataProperties","localProperties","concatHex","decodeAbiParameters","encodeAbiParameters","isHex","size","sliceHex","default$Record","hexKeyTupleTo$Record","hexKeyTuple","$recordToHexKeyTuple","$record","length","_","index","encode$Record","keySchema","keys","keyName","type","decode$Record","arrayToIterator","array","i","mapObject","source","valueMap","target","key","createTableMethodsUtils","store","tableId","$Record","paused","hexToResource","spliceHex","size","Write","createCustomWriter","_store","store","processLog","log","namespace","name","hexToResource","$record","hexKeyTupleTo$Record","debug","table","getPropertiesSchema","Write","processed","properties","TinyBaseAdapter","previousProperties","previousStaticData","newStaticData","spliceHex","size","newProperties","previousDynamicData","newDynamicData","concatHex","isDynamicAbiType","isStaticAbiType","decodeDynamicField","decodeStaticField","hexToEncodedLengths","staticDataLength","readHex","staticAbiTypeToByteLength","dynamicAbiTypeToDefaultValue","encodePropertiesToTinyBase","properties","formattedProperties","key","prop","propType","_","v","decodeValueArgs","propertiesSchema","args","staticData","encodedLengths","dynamicData","decodeValue","concatHex","readHex","staticDataLength","isStaticAbiType","data","staticFields","dynamicFields","isDynamicAbiType","valueTuple","decodeRecord","encodePropertiesToTinyBase","key","properties","bytesOffset","fieldType","fieldByteLength","staticAbiTypeToByteLength","prop","decodeStaticField","schemaStaticDataLength","actualStaticDataLength","dataLayout","hexToEncodedLengths","i","dataLength","decodeDynamicField","dynamicAbiTypeToDefaultValue","actualDynamicDataLength","ignoreKey","key","metadataProperties","localProperties","decodePropertiesFromTinyBase","formattedProperties","decodedProperties","prop","type","v","encodedKey","lastSynced","TinyBaseAdapter","decodeValueArgs","decodePropertiesFromTinyBase","encodePropertiesToTinyBase","getPropertiesAndTypeFromRowChange","getCellChange","keys","tableId","$record","type","key","metadataProperties","localProperties","newRow","previousRow","acc","oldValueAtKey","newValueAtKey","v","newProperties","TinyBaseAdapter","prevProperties","createTinyBaseStore","createQueries","createLocalPersister","STORAGE_KEY","createStore","store","queries","isBrowser","getPersistentStore","persistentStore","persistentQueries","persister","err","resolve","listener","_","__","ready","getStore","key","import_debug","debug","createDebug","error","resolveConfig","storeToV1","storeConfig","SYSTEM_DEFAULTS","extendedScope","get","resolveTable","validateTable","mergeIfUndefined","validateTables","resolveStore","hasOwnKey","validateStore","isObject","mapObject","CODEGEN_DEFAULTS","DEPLOY_DEFAULTS","CONFIG_DEFAULTS","resolveSystems","systems","system","SYSTEM_DEFAULTS","resolveCodegen","codegen","resolveDeploy","deploy","validateWorld","world","scope","namespace","resolveWorld","namespaces","resolvedNamespacedTables","namespaceKey","tableKey","table","resolvedStore","defineWorld","mud_config_default","defineWorld","storeTableDefs","resolveConfig","storeToV1","storeConfig","worldTableDefs","a"]}