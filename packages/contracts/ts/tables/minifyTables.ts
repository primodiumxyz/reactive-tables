import { getSrcDirectory } from "@latticexyz/common/foundry";
import { loadConfig } from "@latticexyz/config/node";
import * as fs from "fs";
import * as path from "path";
import { StoreConfigWithPrototypes } from "../prototypes/types";

const config = (await loadConfig()) as StoreConfigWithPrototypes;
const srcDirectory = await getSrcDirectory();
const outputBaseDirectory = path.join(srcDirectory, config.codegenDirectory);

const header = `
// SPDX-License-Identifier: MIT
pragma solidity >=0.8.21;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { FieldLayout, FieldLayoutLib } from "@latticexyz/store/src/FieldLayout.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";
import { ResourceId } from "@latticexyz/store/src/ResourceId.sol";
import { RESOURCE_TABLE, RESOURCE_OFFCHAIN_TABLE } from "@latticexyz/store/src/storeResourceTypes.sol"; `;

function minifyTables() {
  const tablesDir = outputBaseDirectory + "/tables";
  const outputFile = outputBaseDirectory + "/Tables.sol";

  fs.readdir(tablesDir, (err, files) => {
    if (err) {
      console.error("Error reading directory", err);
      return;
    }

    let combinedContent = header;

    files.forEach((file) => {
      const filePath = path.join(tablesDir, file);
      let content = fs.readFileSync(filePath, "utf-8");

      // Define the end of the block to skip
      const skipBlockEndMarker = '@latticexyz/store/src/storeResourceTypes.sol";';

      // Check if the content contains the block and remove it
      const skipBlockEndIndex = content.indexOf(skipBlockEndMarker);
      if (skipBlockEndIndex !== -1) {
        // Adjust the index to include the end marker length and the newline character
        content = content.substring(skipBlockEndIndex + skipBlockEndMarker.length + 1);
      }

      combinedContent += content + "\n";
    });

    fs.writeFileSync(outputFile, combinedContent);
    console.log(`Content written to ${outputFile}`);
  });
}

function minifyIndex() {
  const filePath = outputBaseDirectory + "/index.sol"; // Replace with your actual Solidity file path

  fs.readFile(filePath, "utf8", (err, data) => {
    if (err) {
      console.error("Error reading file", err);
      return;
    }

    function replaceImportPaths(fileContent: string): string {
      return fileContent
        .split("\n") // Split the content into lines
        .map((line) => line.replace(/"\.\/tables\/(.*?)\.sol"/g, '"./Tables.sol"')) // Replace the path in each line
        .join("\n"); // Join the lines back together
    }

    // Write the updated content back to the same file or a new file
    fs.writeFile(filePath, replaceImportPaths(data), (err) => {
      // You can change filePath to a new file if needed
      if (err) {
        console.error("Error writing file", err);
        return;
      }
      console.log(`File updated successfully.`);
    });
  });
}
minifyTables();
setTimeout(() => minifyIndex(), 250);
